"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = void 0;
const rules_1 = require("tslint/lib/rules");
const typescript_1 = __importDefault(require("typescript"));
const noNamedExportsError = 'Named import is not allowed. The module does not expose named exports when ' +
    'imported in an ES module. Use a default import instead.';
const noDefaultExportError = 'Default import is not allowed. The module does not expose a default export at ' +
    'runtime. Use a named import instead.';
/**
 * Rule that blocks named imports from being used for certain configured module
 * specifiers. This is helpful for enforcing an ESM-compatible interop with CommonJS
 * modules which do not expose named bindings at runtime.
 *
 * For example, consider the `typescript` module. It does not statically expose named
 * exports even though the type definition suggests it. An import like the following
 * will break at runtime when the `typescript` CommonJS module is imported inside an ESM.
 *
 * ```
 * import * as ts from 'typescript';
 * console.log(ts.SyntaxKind.CallExpression); // `SyntaxKind is undefined`.
 * ```
 *
 * More details here: https://nodejs.org/api/esm.html#esm_import_statements.
 */
class Rule extends rules_1.AbstractRule {
    apply(sourceFile) {
        const options = this.getOptions().ruleArguments[0];
        return this.applyWithFunction(sourceFile, (ctx) => visitNode(sourceFile, ctx, options));
    }
}
exports.Rule = Rule;
function visitNode(node, ctx, options) {
    if (options.incompatibleModules && typescript_1.default.isImportDeclaration(node)) {
        const specifier = node.moduleSpecifier;
        const failureMsg = options.incompatibleModules[specifier.text];
        if (failureMsg !== undefined) {
            ctx.addFailureAtNode(node, failureMsg);
            return;
        }
    }
    if (options.noNamedExports && isNamedImportToDisallowedModule(node, options.noNamedExports)) {
        ctx.addFailureAtNode(node, noNamedExportsError);
    }
    if (options.noDefaultExport && isDefaultImportToDisallowedModule(node, options.noDefaultExport)) {
        ctx.addFailureAtNode(node, noDefaultExportError);
    }
    typescript_1.default.forEachChild(node, (n) => visitNode(n, ctx, options));
}
function isNamedImportToDisallowedModule(node, disallowed) {
    if (!typescript_1.default.isImportDeclaration(node) || node.importClause === undefined) {
        return false;
    }
    const specifier = node.moduleSpecifier;
    return !!node.importClause.namedBindings && disallowed.includes(specifier.text);
}
function isDefaultImportToDisallowedModule(node, disallowed) {
    if (!typescript_1.default.isImportDeclaration(node) || node.importClause === undefined) {
        return false;
    }
    const specifier = node.moduleSpecifier;
    return node.importClause.name !== undefined && disallowed.includes(specifier.text);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGVJbXBvcnRGb3JFc21DanNJbnRlcm9wUnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3RzbGludC1ydWxlcy92YWxpZGF0ZUltcG9ydEZvckVzbUNqc0ludGVyb3BSdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7Ozs7OztBQUdILDRDQUE4QztBQUM5Qyw0REFBNEI7QUFFNUIsTUFBTSxtQkFBbUIsR0FDdkIsNkVBQTZFO0lBQzdFLHlEQUF5RCxDQUFDO0FBRTVELE1BQU0sb0JBQW9CLEdBQ3hCLGdGQUFnRjtJQUNoRixzQ0FBc0MsQ0FBQztBQXNCekM7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gsTUFBYSxJQUFLLFNBQVEsb0JBQVk7SUFDM0IsS0FBSyxDQUFDLFVBQXlCO1FBQ3RDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkQsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzFGLENBQUM7Q0FDRjtBQUxELG9CQUtDO0FBRUQsU0FBUyxTQUFTLENBQUMsSUFBYSxFQUFFLEdBQWdCLEVBQUUsT0FBb0I7SUFDdEUsSUFBSSxPQUFPLENBQUMsbUJBQW1CLElBQUksb0JBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMvRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZUFBbUMsQ0FBQztRQUMzRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRS9ELElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtZQUM1QixHQUFHLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3ZDLE9BQU87U0FDUjtLQUNGO0lBRUQsSUFBSSxPQUFPLENBQUMsY0FBYyxJQUFJLCtCQUErQixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUU7UUFDM0YsR0FBRyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0tBQ2pEO0lBRUQsSUFBSSxPQUFPLENBQUMsZUFBZSxJQUFJLGlDQUFpQyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUU7UUFDL0YsR0FBRyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0tBQ2xEO0lBRUQsb0JBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxTQUFTLCtCQUErQixDQUFDLElBQWEsRUFBRSxVQUFvQjtJQUMxRSxJQUFJLENBQUMsb0JBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRTtRQUNwRSxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQW1DLENBQUM7SUFDM0QsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEYsQ0FBQztBQUVELFNBQVMsaUNBQWlDLENBQUMsSUFBYSxFQUFFLFVBQW9CO0lBQzVFLElBQUksQ0FBQyxvQkFBRSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssU0FBUyxFQUFFO1FBQ3BFLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZUFBbUMsQ0FBQztJQUUzRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNyRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7UnVsZUZhaWx1cmUsIFdhbGtDb250ZXh0fSBmcm9tICd0c2xpbnQvbGliJztcbmltcG9ydCB7QWJzdHJhY3RSdWxlfSBmcm9tICd0c2xpbnQvbGliL3J1bGVzJztcbmltcG9ydCB0cyBmcm9tICd0eXBlc2NyaXB0JztcblxuY29uc3Qgbm9OYW1lZEV4cG9ydHNFcnJvciA9XG4gICdOYW1lZCBpbXBvcnQgaXMgbm90IGFsbG93ZWQuIFRoZSBtb2R1bGUgZG9lcyBub3QgZXhwb3NlIG5hbWVkIGV4cG9ydHMgd2hlbiAnICtcbiAgJ2ltcG9ydGVkIGluIGFuIEVTIG1vZHVsZS4gVXNlIGEgZGVmYXVsdCBpbXBvcnQgaW5zdGVhZC4nO1xuXG5jb25zdCBub0RlZmF1bHRFeHBvcnRFcnJvciA9XG4gICdEZWZhdWx0IGltcG9ydCBpcyBub3QgYWxsb3dlZC4gVGhlIG1vZHVsZSBkb2VzIG5vdCBleHBvc2UgYSBkZWZhdWx0IGV4cG9ydCBhdCAnICtcbiAgJ3J1bnRpbWUuIFVzZSBhIG5hbWVkIGltcG9ydCBpbnN0ZWFkLic7XG5cbmludGVyZmFjZSBSdWxlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZHVsZXMgd2l0aG91dCBhbnkgbmFtZWQgZXhwb3J0cyB0aGF0IE5vZGVKUyBjYW4gc3RhdGljYWxseSBkZXRlY3Qgd2hlbiB0aGVcbiAgICogQ29tbW9uSlMgbW9kdWxlIGlzIGltcG9ydGVkIGZyb20gRVNNLiBOb2RlIG9ubHkgZXhwb3NlcyBuYW1lZCBleHBvcnRzIHdoaWNoIGFyZVxuICAgKiBzdGF0aWNhbGx5IGRpc2NvdmVyYWJsZTogaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9lc20uaHRtbCNlc21faW1wb3J0X3N0YXRlbWVudHMuXG4gICAqL1xuICBub05hbWVkRXhwb3J0cz86IHN0cmluZ1tdO1xuICAvKipcbiAgICogTGlzdCBvZiBtb2R1bGVzIHdoaWNoIGFwcGVhciB0byBoYXZlIG5hbWVkIGV4cG9ydHMgaW4gdGhlIHR5cGluZ3MgYnV0IGRvXG4gICAqIG5vdCBoYXZlIGFueSBhdCBydW50aW1lIGR1ZSB0byBOb2RlSlMgbm90IGJlaW5nIGFibGUgdG8gZGlzY292ZXIgdGhlc2VcbiAgICogdGhyb3VnaCBzdGF0aWMgYW5hbHlzaXM6IGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvZXNtLmh0bWwjZXNtX2ltcG9ydF9zdGF0ZW1lbnRzLlxuICAgKiAqL1xuICBub0RlZmF1bHRFeHBvcnQ/OiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIExpc3Qgb2YgbW9kdWxlcyB3aGljaCBhcmUgYWx3YXlzIGluY29tcGF0aWJsZS4gVGhlIHJ1bGUgYWxsb3dzIGZvciBhIGN1c3RvbVxuICAgKiBtZXNzYWdlIHRvIGJlIHByb3ZpZGVkIHdoZW4gaXQgZGlzY292ZXJzIGFuIGltcG9ydCB0byBzdWNoIGEgbW9kdWxlLlxuICAgKi9cbiAgaW5jb21wYXRpYmxlTW9kdWxlcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG59XG5cbi8qKlxuICogUnVsZSB0aGF0IGJsb2NrcyBuYW1lZCBpbXBvcnRzIGZyb20gYmVpbmcgdXNlZCBmb3IgY2VydGFpbiBjb25maWd1cmVkIG1vZHVsZVxuICogc3BlY2lmaWVycy4gVGhpcyBpcyBoZWxwZnVsIGZvciBlbmZvcmNpbmcgYW4gRVNNLWNvbXBhdGlibGUgaW50ZXJvcCB3aXRoIENvbW1vbkpTXG4gKiBtb2R1bGVzIHdoaWNoIGRvIG5vdCBleHBvc2UgbmFtZWQgYmluZGluZ3MgYXQgcnVudGltZS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgY29uc2lkZXIgdGhlIGB0eXBlc2NyaXB0YCBtb2R1bGUuIEl0IGRvZXMgbm90IHN0YXRpY2FsbHkgZXhwb3NlIG5hbWVkXG4gKiBleHBvcnRzIGV2ZW4gdGhvdWdoIHRoZSB0eXBlIGRlZmluaXRpb24gc3VnZ2VzdHMgaXQuIEFuIGltcG9ydCBsaWtlIHRoZSBmb2xsb3dpbmdcbiAqIHdpbGwgYnJlYWsgYXQgcnVudGltZSB3aGVuIHRoZSBgdHlwZXNjcmlwdGAgQ29tbW9uSlMgbW9kdWxlIGlzIGltcG9ydGVkIGluc2lkZSBhbiBFU00uXG4gKlxuICogYGBgXG4gKiBpbXBvcnQgKiBhcyB0cyBmcm9tICd0eXBlc2NyaXB0JztcbiAqIGNvbnNvbGUubG9nKHRzLlN5bnRheEtpbmQuQ2FsbEV4cHJlc3Npb24pOyAvLyBgU3ludGF4S2luZCBpcyB1bmRlZmluZWRgLlxuICogYGBgXG4gKlxuICogTW9yZSBkZXRhaWxzIGhlcmU6IGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvZXNtLmh0bWwjZXNtX2ltcG9ydF9zdGF0ZW1lbnRzLlxuICovXG5leHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIEFic3RyYWN0UnVsZSB7XG4gIG92ZXJyaWRlIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBSdWxlRmFpbHVyZVtdIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCkucnVsZUFyZ3VtZW50c1swXTtcbiAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCAoY3R4KSA9PiB2aXNpdE5vZGUoc291cmNlRmlsZSwgY3R4LCBvcHRpb25zKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmlzaXROb2RlKG5vZGU6IHRzLk5vZGUsIGN0eDogV2Fsa0NvbnRleHQsIG9wdGlvbnM6IFJ1bGVPcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLmluY29tcGF0aWJsZU1vZHVsZXMgJiYgdHMuaXNJbXBvcnREZWNsYXJhdGlvbihub2RlKSkge1xuICAgIGNvbnN0IHNwZWNpZmllciA9IG5vZGUubW9kdWxlU3BlY2lmaWVyIGFzIHRzLlN0cmluZ0xpdGVyYWw7XG4gICAgY29uc3QgZmFpbHVyZU1zZyA9IG9wdGlvbnMuaW5jb21wYXRpYmxlTW9kdWxlc1tzcGVjaWZpZXIudGV4dF07XG5cbiAgICBpZiAoZmFpbHVyZU1zZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBmYWlsdXJlTXNnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0aW9ucy5ub05hbWVkRXhwb3J0cyAmJiBpc05hbWVkSW1wb3J0VG9EaXNhbGxvd2VkTW9kdWxlKG5vZGUsIG9wdGlvbnMubm9OYW1lZEV4cG9ydHMpKSB7XG4gICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgbm9OYW1lZEV4cG9ydHNFcnJvcik7XG4gIH1cblxuICBpZiAob3B0aW9ucy5ub0RlZmF1bHRFeHBvcnQgJiYgaXNEZWZhdWx0SW1wb3J0VG9EaXNhbGxvd2VkTW9kdWxlKG5vZGUsIG9wdGlvbnMubm9EZWZhdWx0RXhwb3J0KSkge1xuICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKG5vZGUsIG5vRGVmYXVsdEV4cG9ydEVycm9yKTtcbiAgfVxuXG4gIHRzLmZvckVhY2hDaGlsZChub2RlLCAobikgPT4gdmlzaXROb2RlKG4sIGN0eCwgb3B0aW9ucykpO1xufVxuXG5mdW5jdGlvbiBpc05hbWVkSW1wb3J0VG9EaXNhbGxvd2VkTW9kdWxlKG5vZGU6IHRzLk5vZGUsIGRpc2FsbG93ZWQ6IHN0cmluZ1tdKTogYm9vbGVhbiB7XG4gIGlmICghdHMuaXNJbXBvcnREZWNsYXJhdGlvbihub2RlKSB8fCBub2RlLmltcG9ydENsYXVzZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHNwZWNpZmllciA9IG5vZGUubW9kdWxlU3BlY2lmaWVyIGFzIHRzLlN0cmluZ0xpdGVyYWw7XG4gIHJldHVybiAhIW5vZGUuaW1wb3J0Q2xhdXNlLm5hbWVkQmluZGluZ3MgJiYgZGlzYWxsb3dlZC5pbmNsdWRlcyhzcGVjaWZpZXIudGV4dCk7XG59XG5cbmZ1bmN0aW9uIGlzRGVmYXVsdEltcG9ydFRvRGlzYWxsb3dlZE1vZHVsZShub2RlOiB0cy5Ob2RlLCBkaXNhbGxvd2VkOiBzdHJpbmdbXSkge1xuICBpZiAoIXRzLmlzSW1wb3J0RGVjbGFyYXRpb24obm9kZSkgfHwgbm9kZS5pbXBvcnRDbGF1c2UgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBzcGVjaWZpZXIgPSBub2RlLm1vZHVsZVNwZWNpZmllciBhcyB0cy5TdHJpbmdMaXRlcmFsO1xuXG4gIHJldHVybiBub2RlLmltcG9ydENsYXVzZS5uYW1lICE9PSB1bmRlZmluZWQgJiYgZGlzYWxsb3dlZC5pbmNsdWRlcyhzcGVjaWZpZXIudGV4dCk7XG59XG4iXX0=